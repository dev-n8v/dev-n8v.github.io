{"version":3,"file":"component---src-pages-index-tsx-1c81673271aabf189d4e.js","mappings":"+JAG+B,IAAAA,EAAA,CAAAC,KAAA,UAAAC,OAAA,mBAK/B,MAAMA,EAAS,CACdC,KAAOC,GAAeJ,EAItBK,YAAcD,IACbE,EAAAA,EAAAA,IAAI,CACHC,WAAYH,EAAMI,WAAWC,kBAC7B,cAGUC,EAAMC,IAAmB,MAANA,EAC/B,OACCC,EAAAA,EAAAA,IAACC,EAAAA,EAAK,CAACP,IAAKJ,EAAOC,KAAMW,eAAe,SAASC,WAAW,WAC3DH,EAAAA,EAAAA,IAACI,EAAAA,EAAU,CAACV,IAAKJ,EAAOG,YAAaY,QAAQ,MAC3C,UAEK,C,kFCMV,UAxBA,WACC,MAAMC,GAASC,EAAAA,EAAAA,KACTf,GAAQgB,EAAAA,EAAAA,KAEd,OACCR,EAAAA,EAAAA,IAACS,EAAAA,EAAY,CACZC,eAAgB,CACfC,QAASL,EAAOM,YAChBC,KAAMP,EAAOO,KACbC,UAAWtB,EAAMsB,UACjBC,kBAAmBA,CAACC,EAAGC,IAASzB,EAAM0B,aAAaD,IAEpDE,eAAgB,CACfC,eAAgBd,EAAOe,WACvBP,UAAWtB,EAAMsB,UACjBQ,kBAAmB9B,EAAM+B,iBAE1BC,eAAgB,CAAC,IAEjBxB,EAAAA,EAAAA,IAACF,EAAAA,EAAG,MAGP,C","sources":["webpack://app/./src/components/organisms/wip.tsx","webpack://app/./src/pages/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\nimport Typography from \"@mui/material/Typography\";\nimport Stack from \"@mui/material/Stack\";\nimport * as React from \"react\";\nimport { AppTheme } from \"@/theme\";\n\nexport type WipProps = React.PropsWithChildren<{}>;\n\nconst styles = {\n\troot: (theme: AppTheme) =>\n\t\tcss({\n\t\t\tminHeight: \"90vh\",\n\t\t}),\n\tdescription: (theme: AppTheme) =>\n\t\tcss({\n\t\t\tfontWeight: theme.typography.fontWeightMedium,\n\t\t}),\n};\n\nexport const Wip = ({}: WipProps) => {\n\treturn (\n\t\t<Stack css={styles.root} justifyContent=\"center\" alignItems=\"center\">\n\t\t\t<Typography css={styles.description} variant=\"h1\">\n\t\t\t\t{\"Wip ;)\"}\n\t\t\t</Typography>\n\t\t</Stack>\n\t);\n};\n","import * as React from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport { Wip } from \"@/components/organisms/wip\";\nimport { useAppDrawerStore } from \"@/stores/use-app-drawer-store\";\nimport { useThemeModeStore } from \"@/stores/use-theme-mode-store\";\nimport { MainTemplate } from \"@/components/templates/main\";\n\nfunction Index() {\n\tconst drawer = useAppDrawerStore();\n\tconst theme = useThemeModeStore();\n\n\treturn (\n\t\t<MainTemplate\n\t\t\tappDrawerProps={{\n\t\t\t\tonClose: drawer.closeDrawer,\n\t\t\t\topen: drawer.open,\n\t\t\t\tthemeMode: theme.themeMode,\n\t\t\t\tonThemeModeChange: (_, mode) => theme.setThemeMode(mode),\n\t\t\t}}\n\t\t\tappHeaderProps={{\n\t\t\t\tonOpenSettings: drawer.openDrawer,\n\t\t\t\tthemeMode: theme.themeMode,\n\t\t\t\tonToggleThemeMode: theme.toggleThemeMode,\n\t\t\t}}\n\t\t\tappFooterProps={{}}\n\t\t>\n\t\t\t<Wip />\n\t\t</MainTemplate>\n\t);\n}\n\nexport default Index;\n"],"names":["_ref","name","styles","root","theme","description","css","fontWeight","typography","fontWeightMedium","Wip","_ref2","___EmotionJSX","Stack","justifyContent","alignItems","Typography","variant","drawer","useAppDrawerStore","useThemeModeStore","MainTemplate","appDrawerProps","onClose","closeDrawer","open","themeMode","onThemeModeChange","_","mode","setThemeMode","appHeaderProps","onOpenSettings","openDrawer","onToggleThemeMode","toggleThemeMode","appFooterProps"],"sourceRoot":""}